# .github/workflows/prod-auto-approve.yml
name: Auto-Approve (reusable)

on:
  workflow_call:
    inputs:
      run_id:
        type: string
        required: true

      # Comma-separated job names that must KEEP manual approval
      skip_job_names:
        type: string
        default: ""          # empty → auto-approve everything

    secrets:
      GH_PAT:                # PAT of a user that is a required reviewer
        required: true

jobs:
  auto-approve:
    runs-on: ubuntu-latest

    permissions:
      deployments: write     # required for POST /pending_deployments
      contents:   read

    env:
      GH_TOKEN:   ${{ secrets.GH_PAT }}
      RUN_ID:     ${{ inputs.run_id }}
      SKIP_RAW:   ${{ inputs.skip_job_names }}

    steps:
    # ─────────────────────────────────────────────────────────────
    - name: gh login
      run: echo "$GH_TOKEN" | gh auth login --with-token

    # turn "deploy , smoke" →  deploy|smoke   (regex OR list)
    - name: Build skip-regex
      id: skip
      run: |
        REGEX=$(echo "$SKIP_RAW" |
                tr ',' '\n' |
                sed 's/^[[:space:]]*//;s/[[:space:]]*$//' |
                paste -sd'|' -)
        echo "SKIP_REGEX=$REGEX" >> $GITHUB_ENV
        echo "regex=$REGEX"      >> $GITHUB_OUTPUT

    # ─────────────────────────────────────────────────────────────
    - name: Watch & selectively approve
      run: |
        echo "Watcher started for workflow-run $RUN_ID"
        echo "Skip-regex: $SKIP_REGEX"

        while true; do
          # 1 ▸ list pending deployments for this run
          PENDING=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/pending_deployments)
          PENDING_COUNT=$(echo "$PENDING" | jq 'length')

          # 2 ▸ fetch the run’s jobs once per loop (enough for <100 jobs)
          JOBS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs?per_page=100)

          if (( PENDING_COUNT > 0 )); then
            echo "::notice ::$PENDING_COUNT pending deployment(s) found"

            echo "$PENDING" | jq -c '.[]' | while read -r DEP; do
              ENV_ID=$(echo "$DEP" | jq '.environment_id')

              # map environment-ID ➜ job name
              JOB_NAME=$(echo "$JOBS" |
                         jq -r --argjson id "$ENV_ID" \
                             '.jobs[] | select(.environment.id==$id) | .name')

              if [[ -z "$JOB_NAME" ]]; then
                echo "⚠️  Env $ENV_ID not linked to a job – skipping"
                continue
              fi

              if [[ -n "$SKIP_REGEX" && "$JOB_NAME" =~ $SKIP_REGEX ]]; then
                echo "⏭️  Leaving “$JOB_NAME” for manual approval"
                continue
              fi

              echo "✅  Auto-approving “$JOB_NAME”"
              gh api -X POST \
                repos/${{ github.repository }}/actions/runs/$RUN_ID/pending_deployments \
                -F environment_ids[]=$ENV_ID \
                -F state=approved \
                -F comment="Auto-approved by deploy-bot ✨"
            done
          fi

          # 3 ▸ exit when the run is finished AND nothing is left pending
          RUN_STATUS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq .status)
          if [[ "$RUN_STATUS" == "completed" && "$PENDING_COUNT" -eq 0 ]]; then
            echo "Run completed and no pending deployments – exiting"
            break
          fi

          sleep 8
        done
