name: Auto-Approve (reusable)

on:
  workflow_call:
    inputs:
      run_id:
        required: true
        type: string
    secrets:
      GH_PAT:
        required: true

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    permissions:
      deployments: write        # needed for POST /pending_deployments
      contents: read
    env:
      GH_TOKEN: ${{ secrets.GH_PAT }}
      RUN_ID:   ${{ inputs.run_id }}

    steps:
      # authenticate the CLI
      - name: Log in to gh
        run: echo "$GH_TOKEN" | gh auth login --with-token

      # main loop – keeps polling until the promote-latest-version step is completed
      - name: Watch & approve
        run: |
          echo "Watching run $RUN_ID for pending deployments…"

          while true; do
            # First get all the job names from the run
            JOBS_JSON=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs)
            
            # Debug: Show all available jobs
            echo "All available jobs in this run:"
            echo "$JOBS_JSON" | jq -r '.jobs[] | .name'
            
            # Filter out auto-approve jobs and get other relevant jobs
            echo "Filtering out auto-approve jobs..."
            RELEVANT_JOBS=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name | test("auto-approve"; "i") | not) | .name')
            echo "Relevant jobs (excluding auto-approve):"
            echo "$RELEVANT_JOBS"
            
            # Get the last/latest job name which is most likely the deploy job
            LATEST_JOB=$(echo "$RELEVANT_JOBS" | tail -1)
            echo "Latest job: $LATEST_JOB"
            
            # Check if the latest job contains "deploy" (case insensitive)
            if [[ "${LATEST_JOB,,}" == *"deploy"* ]]; then
              echo "Latest job is a deploy job: $LATEST_JOB"
              DEPLOY_JOB="$LATEST_JOB"
            else
              # Try to find any job with "deploy" in the name
              DEPLOY_JOB=$(echo "$RELEVANT_JOBS" | grep -i "deploy" | head -1)
              echo "Found deploy job: $DEPLOY_JOB"
            fi
            
            # list pending deployments for this run
            JSON=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/pending_deployments)
            COUNT=$(echo "$JSON" | jq 'length')

            if [[ "$COUNT" -gt 0 ]]; then
              echo "::notice ::Found $COUNT pending deployment(s)"
              
              # Check each pending deployment
              echo "$JSON" | jq -c '.[]' | while read -r deployment; do
                ENV_NAME=$(echo "$deployment" | jq -r '.environment.name')
                ENV_ID=$(echo "$deployment" | jq -r '.environment.id')
                
                echo "Processing pending approval for environment: $ENV_NAME (ID: $ENV_ID)"
                
                # Print the full JSON structure for debugging
                echo "Deployment JSON structure:"
                echo "$deployment" | jq '.'
                
                # Skip auto-approval for environments used in Deploy jobs
                SHOULD_SKIP=false
                
                # Check if this environment is mentioned in the same context as any deployment job
                echo "Checking if environment is used in a deployment job..."
                env_pattern="\"$ENV_NAME\""
                
                if [[ "${LATEST_JOB,,}" == *"deploy"* ]]; then
                  SHOULD_SKIP=true
                  echo "Found environment $ENV_NAME near deploy job $job - will require manual approval"
                fi
                
                if [[ "$SHOULD_SKIP" == "true" ]]; then
                  echo "::notice ::Skipping auto-approval for environment $ENV_NAME - manual approval required"
                  continue
                fi
                
                # Auto-approve other environments
                echo "::notice ::Auto-approving environment: $ENV_NAME"
                gh api -X POST \
                  repos/${{ github.repository }}/actions/runs/$RUN_ID/pending_deployments \
                  -F environment_ids[]=$ENV_ID \
                  -F state=approved \
                  -F comment="Auto-approved by deploy-bot ✨"
              done
            fi
            
            # Check if any deployment job is completed
            DEPLOY_JOB_STATUS=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name | test("Deploy"; "i")) | .conclusion')
            echo "DEPLOY_JOB_STATUS: $DEPLOY_JOB_STATUS"
            
            if [[ "$DEPLOY_JOB_STATUS" == "success" ]]; then
              echo "::notice ::Deploy job completed successfully, stopping auto-approval loop"
              break
            fi
            
            # Also stop if the whole workflow run has completed (as a fallback)
            STATUS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq .status)
            if [[ "$STATUS" == "completed" ]]; then
              echo "::notice ::Workflow run completed, stopping auto-approval loop"
              break
            fi

            echo "Waiting for 8 seconds before next check..."
            sleep 8
          done
