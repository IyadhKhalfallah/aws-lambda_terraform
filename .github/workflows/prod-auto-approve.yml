name: Auto-Approve (reusable)

on:
  workflow_call:
    inputs:
      run_id:
        required: true
        type: string
    secrets:
      GH_PAT:
        required: true

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    permissions:
      deployments: write        # needed for POST /pending_deployments
      contents: read
    env:
      GH_TOKEN: ${{ secrets.GH_PAT }}
      RUN_ID:   ${{ inputs.run_id }}

    steps:
      # authenticate the CLI
      - name: Log in to gh
        run: echo "$GH_TOKEN" | gh auth login --with-token

      # main loop – keeps polling until the promote-latest-version step is completed
      - name: Watch & approve
        run: |
          echo "Watching run $RUN_ID for pending deployments…"

          while true; do
            # list pending deployments for this run
            JSON=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/pending_deployments)
            COUNT=$(echo "$JSON" | jq 'length')

            if [[ "$COUNT" -gt 0 ]]; then
              echo "::notice ::Found $COUNT pending deployment(s)"
              
              # Check each pending deployment
              echo "$JSON" | jq -c '.[]' | while read -r deployment; do
                ENV_NAME=$(echo "$deployment" | jq -r '.environment.name')
                ENV_ID=$(echo "$deployment" | jq -r '.environment.id')
                CURRENT_STEP=$(echo "$deployment" | jq -r '.current_environment_attempt.deployment_attempt.step')
                
                echo "Pending approval for environment: $ENV_NAME (ID: $ENV_ID) - Step: $CURRENT_STEP"
                
                # Print the full JSON structure for debugging
                echo "Deployment JSON structure:"
                echo "$deployment" | jq '.'
                
                # Skip auto-approval for Deploy or Build jobs
                if [[ "$CURRENT_STEP" == *"Deploy"* ]]; then
                  echo "::notice ::Skipping auto-approval for critical job: $CURRENT_STEP in environment $ENV_NAME - manual approval required"
                  continue
                fi
                
                # Auto-approve other jobs
                echo "::notice ::Auto-approving job: $CURRENT_STEP in environment $ENV_NAME"
                gh api -X POST \
                  repos/${{ github.repository }}/actions/runs/$RUN_ID/pending_deployments \
                  -F environment_ids[]=$ENV_ID \
                  -F state=approved \
                  -F comment="Auto-approved by deploy-bot ✨"
              done
            fi

            # Check if the Deploy job is completed
            JOBS_JSON=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs)
            
            # Debug: Show all job names to verify structure
            echo "Available jobs:"
            echo "$JOBS_JSON" | jq -r '.jobs[] | .name'
            
            # Try corrected syntax for GitHub API jobs response
            DEPLOY_JOB_STATUS=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name | test("Deploy"; "i")) | .conclusion')
            echo "DEPLOY_JOB_STATUS: $DEPLOY_JOB_STATUS"
            
            if [[ "$DEPLOY_JOB_STATUS" == "success" ]]; then
              echo "::notice ::Critical job completed successfully, stopping auto-approval loop"
              break
            fi
            
            # Also stop if the whole workflow run has completed (as a fallback)
            STATUS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq .status)
            if [[ "$STATUS" == "completed" ]]; then
              echo "::notice ::Workflow run completed, stopping auto-approval loop"
              break
            fi

            echo "Waiting for 8 seconds before next check..."
            sleep 8
          done
