name: Auto-Approve (reusable)

on:
  workflow_call:
    inputs:
      run_id:
        required: true
        type: string
    secrets:
      GH_PAT:
        required: true

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    permissions:
      deployments: write        # needed for POST /pending_deployments
      contents: read
    env:
      GH_TOKEN: ${{ secrets.GH_PAT }}
      RUN_ID:   ${{ inputs.run_id }}

    steps:
      # authenticate the CLI
      - name: Log in to gh
        run: echo "$GH_TOKEN" | gh auth login --with-token

      # main loop – keeps polling until the promote-latest-version step is completed
      - name: Watch & approve
        run: |
          echo "Watching run $RUN_ID for pending deployments…"

          while true; do
            # First get all the job names from the run to identify deployment jobs
            JOBS_JSON=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs)
            echo "Full jobs JSON:"
            echo "$JOBS_JSON" | jq -r '.'
            
            # List all job names for reference
            echo "All job names in this run:"
            echo "$JOBS_JSON" | jq -r '.jobs[] | .name'
            
            # list pending deployments for this run
            DEPLOYMENTS_JSON=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/pending_deployments)
            COUNT=$(echo "$DEPLOYMENTS_JSON" | jq 'length')

            if [[ "$COUNT" -gt 0 ]]; then
              echo "::notice ::Found $COUNT pending deployment(s)"
              
              # Check each pending deployment
              echo "$DEPLOYMENTS_JSON" | jq -c '.[]' | while read -r deployment; do
                ENV_NAME=$(echo "$deployment" | jq -r '.environment.name')
                ENV_ID=$(echo "$deployment" | jq -r '.environment.id')
                
                echo "Pending approval for environment: $ENV_NAME (ID: $ENV_ID)"
                
                # Print the full deployment JSON for debugging
                echo "Deployment JSON for $ENV_NAME:"
                echo "$deployment" | jq '.'
                
                # Now extract the workflow name for this environment from the jobs JSON
                # Find jobs that might be related to this environment
                RELATED_JOBS=$(echo "$JOBS_JSON" | jq -r ".jobs[] | select(.name | contains(\"$ENV_NAME\") or .html_url | contains(\"$ENV_NAME\")) | .name")
                echo "Jobs related to environment $ENV_NAME:"
                echo "$RELATED_JOBS"
                
                # Check if any related job has "Deploy" in its name
                if echo "$RELATED_JOBS" | grep -i "Deploy" > /dev/null; then
                  echo "::notice ::Environment $ENV_NAME is associated with a Deploy job - MANUAL approval required"
                  continue
                fi
                
                # If not found in related jobs, check if environment name itself contains "deploy"
                if [[ "$ENV_NAME" == *"[Dd]eploy"* ]]; then
                  echo "::notice ::Environment $ENV_NAME appears to be a deployment environment - MANUAL approval required"
                  continue
                fi
                
                # Auto-approve environments not related to deployment
                echo "::notice ::Auto-approving environment: $ENV_NAME"
                gh api -X POST \
                  repos/${{ github.repository }}/actions/runs/$RUN_ID/pending_deployments \
                  -F environment_ids[]=$ENV_ID \
                  -F state=approved \
                  -F comment="Auto-approved by deploy-bot ✨"
              done
            fi
            
            # Check if any deployment job is completed
            DEPLOY_JOB_STATUS=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name | test("Deploy"; "i")) | .conclusion')
            echo "Deploy job status: $DEPLOY_JOB_STATUS"
            
            if [[ "$DEPLOY_JOB_STATUS" == "success" ]]; then
              echo "::notice ::Deploy job completed successfully, stopping auto-approval loop"
              break
            fi
            
            # Also stop if the whole workflow run has completed (as a fallback)
            STATUS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq .status)
            if [[ "$STATUS" == "completed" ]]; then
              echo "::notice ::Workflow run completed, stopping auto-approval loop"
              break
            fi

            echo "Waiting for 8 seconds before next check..."
            sleep 8
          done
